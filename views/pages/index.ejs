<!DOCTYPE html>
<html>
<head>
  <% include ../partials/header.ejs %>
</head>
<body>
  <h1>Show National Contiguity with a Force Directed Graph</h1>
  <div class="container-fluid">
    <div class="container" id="main">
      <svg id="graph"></svg>
    </div>
  </div>
 <footer>
   <script>
   d3.json('https://raw.githubusercontent.com/DealPete/forceDirected/master/countries.json', function(err, data) {
   //add toolbar div
     let div = d3.select("body").append("div")
       .attr("class", "tooltip")
       .style("opacity", 1);

       let width = 900,
           height = 700;

       let color = d3.scaleOrdinal(d3.schemeCategory20);

       let chart = d3.select("#graph")
           .attr("width", width)
           .attr("height", height);

       //let tooltip = d3.select("#tooltip")
         //  .style("visibility", "hidden")
         //  .style("height", 0);

       let simulation = d3.forceSimulation()
           .force("charge", d3.forceManyBody().distanceMax(110).strength(-100))
           .force("link", d3.forceLink())
           .force("center", d3.forceCenter().x(width / 2).y(height / 2))
           .force("collide", d3.forceCollide(16).strength(1));

      let link = chart.append("g")
           .attr("class", "links")
           .selectAll("line")
           .data(data.links)
           .enter().append("line").attr("stroke-width", 1)
           .style("stroke", "#fff");

       let node = d3.select("#main").append("div")
           .attr("class", "nodes")
           .style("width", width + "px")
           .selectAll("img")
           .data(data.nodes)
           .enter().append("img")
           .attr("class", function(d) {
               return "flag flag-" + d.code;
           })
           .on("mouseover", function(d) {
               div.text(d.country);
               div.style("visibility", "visible");
               div.style("height", "auto");
               return;
           })
           .on("mousemove", function(d) {
               let position = d3.mouse(this.parentElement.parentElement);
               return div.style("top", (position[1] + 55) + "px")
                   .style("left", (position[0] + 200) + "px");
           })
           .on("mouseout", function(d) {
               div.style("height", 0);
               return div.style("visibility", "hidden");
           })
           .call(d3.drag()
               .on("start", dragstarted)
               .on("drag", dragged)
               .on("end", dragended));

       simulation
           .nodes(data.nodes)
           .on("tick", ticked);

       simulation.force("link")
           .links(data.links)
           .distance(50);

       function ticked() {

           node
               .style("left", function(d) {
                   d.x = Math.max(0, Math.min(width - 16, d.x));
                   return d.x + "px";
               })
               .style("top", function(d) {
                   d.y = Math.max(0, Math.min(height - 11, d.y));
                   return d.y + "px";
               });

           link
               .attr("x1", function(d) {
                   return d.source.x + 8; })
               .attr("y1", function(d) {
                   return d.source.y + 5.5; })
               .attr("x2", function(d) {
                   return d.target.x + 8; })
               .attr("y2", function(d) {
                   return d.target.y + 5.5; });
       }

       function dragstarted(d) {
           if (!d3.event.active) simulation.alphaTarget(0.3).restart();
           d.fx = d.x;
           d.fy = d.y;
       }

       function dragged(d) {
           d.fx = d3.event.x;
           d.fy = d3.event.y;
       }

       function dragended(d) {
           if (!d3.event.active) simulation.alphaTarget(0);
           d.fx = null;
           d.fy = null;
       }
   });
   </script>
 </footer>
</html>
</body>
